//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "lendings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub staff_id: Option<i32>,
    pub reader_id: Option<i32>,
    pub status: String,
    pub date_of_lending: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::lendings_detail::Entity")]
    LendingsDetail,
    #[sea_orm(
        belongs_to = "super::readers::Entity",
        from = "Column::ReaderId",
        to = "super::readers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Readers,
    #[sea_orm(
        belongs_to = "super::staff::Entity",
        from = "Column::StaffId",
        to = "super::staff::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Staff,
}

impl Related<super::lendings_detail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LendingsDetail.def()
    }
}

impl Related<super::readers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Readers.def()
    }
}

impl Related<super::staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Staff.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
